"
lr_pings = cypher(graph, query)
data = merge(new_pings, rec_pings)
data = merge(data, lr_pings)
data = merge(data, stores)
data = merge(data, ips)
data = data[1:(nrow(data)-1), ]
data$date = as.Date(data$date)
data
ggplot(data, aes(date)) +
stat_smooth(aes(y = new_pings, colour = "new_pings")) +
stat_smooth(aes(y = recurring_pings, colour = "recurring_pings")) +
stat_smooth(aes(y = long_running_pings, colour = "long_running_pings")) +
stat_smooth(aes(y = stores, colour = "stores")) +
stat_smooth(aes(y = ips, colour = "ips")) +
labs(x = "Date", y = "Count", title = "Comparison of Count of Pings, Stores, and IPs") +
scale_colour_discrete(name = "")
cor(new_pings, stores)
new_pings
cor(new_pings$new_pings, stores$stores)
nrow(new)pings
nrow(new_pings)
nrow(stores)
View(new_pings)
View(ips)
cor(data$new_pings, data$stores)
cor(data$long_running_pings, data$stores)
Sys.Date() - 1
stores = getNodes(graph, query, date = Sys.Date() - 30)
query = "
MATCH (p:Ping {date:{date}, p:1})-[:FROM_STORE]->(s:Store)
RETURN s LIMIT 5
"
stores = getNodes(graph, query, date = Sys.Date() - 30)
stores
date = Sys.Date() - 30
date
query = "
MATCH (p:Ping {date:{date}, p:1})-[:FROM_STORE]->(s:Store)
RETURN s LIMIT 5
"
stores = getNodes(graph, query, date = Sys.Date() - 30)
stores
query = "
MATCH (p:Ping {date:{date}, p:1})-[:FROM_STORE]->(s:Store)
RETURN s LIMIT 100
"
stores = getNodes(graph, query, date = Sys.Date() - 30)
stores
?getNodes
graph = startGraph('http://localhost:7474/db/data/')
n = getNodes(graph, "MATCH n RETURN n LIMIT 1")
n
query = "
MATCH (p:Ping {date:{date}, p:1})-[:FROM_STORE]->(s:Store)
RETURN s
"
stores = getNodes(graph, query, date = Sys.Date() - 30)
stores
date = Sys.Date() - 30
date
query = "
MATCH (p:Ping {date:{date}, p:1})-[:FROM_STORE]->(s:Store)
RETURN s
"
date = Sys.Date() - 30
stores = getNodes(graph, query, date=date)
stores
query = "
MATCH (p:Ping {p:1, date:{date}})-[:FROM_STORE]->(s:Store)
RETURN s
"
stores = getNodes(graph, query, date=as.character(Sys.Date()-30))
library(RNeo4j)
graph = startGraph('http://localhost:7474/db/data/')
query = "
MATCH (p:Ping {p:1, date:{date}})-[:FROM_STORE]->(s:Store)
RETURN s
"
stores = getNodes(graph, query, date=as.character(Sys.Date()-30))
length(stores)
stores = sapply(stores, '[[', 'id')
stores[[1]]
Sys.Date()-0
i = 1
query = "
MATCH (p:Ping {date:{date}})-[:FROM_STORE]->(s:Store)
RETURN COUNT(DISTINCT s) AS count
"
count = cypher(graph, query, date=as.character(Sys.Date()-i))
count
i = 29
count = cypher(graph, query, date=as.character(Sys.Date()-i))
count
query = "
MATCH (p:Ping {date:{date}})-[:FROM_STORE]->(s:Store)
WHERE s.id IN {stores}
RETURN COUNT(DISTINCT s) AS count
"
stores
count = cypher(graph, query, stores=stores, date=as.character(Sys.Date()-i))
count
Sys.Date()-i
30:1
29:0
count
count[[1]]
data = data.frame(i=0, count=length(stores))
data
query = "
MATCH (p:Ping {date:{date}})-[:FROM_STORE]->(s:Store)
WHERE s.id IN {stores}
RETURN COUNT(DISTINCT s) AS count
"
for(i in 29:0) {
count = cypher(graph, query, stores=stores, date=as.character(Sys.Date()-i))
count = count[[1]]
data = rbind(data, data.frame(i=(30-i),count=count))
}
View(data)
query = "
MATCH (p:Ping {p:1, date:{date}})-[:FROM_STORE]->(s:Store)
RETURN s
"
stores = getNodes(graph, query, date=as.character(Sys.Date()-33))
stores = sapply(stores, '[[', 'id')
data = data.frame(i=0, count=length(stores))
query = "
MATCH (p:Ping {date:{date}})-[:FROM_STORE]->(s:Store)
WHERE s.id IN {stores}
RETURN COUNT(DISTINCT s) AS count
"
for(i in 32:3) {
count = cypher(graph, query, stores=stores, date=as.character(Sys.Date()-i))
count = count[[1]]
data = rbind(data, data.frame(i=(33-i),count=count))
}
View(data)
data
plot(data)
stores = data
query = "
MATCH (p:Ping {p:1, date:{date}})<-[:PINGED]-(ip:IP)
RETURN ip
"
ips = getNodes(graph, query, date=as.character(Sys.Date()-33))
ips = sapply(stores, '[[', 'ip')
ips
length(ips)
query = "
MATCH (p:Ping {p:1, date:{date}})<-[:PINGED]-(ip:IP)
RETURN ip
"
ips = getNodes(graph, query, date=as.character(Sys.Date()-33))
length(ips)
ips = sapply(ips, '[[', 'ip')
ips[[1]]
data = data.frame(i=0, count=length(ips))
query = "
data
""
"
query = "
MATCH (p:Ping {p:1, date:{date}})<-[:PINGED]-(ip:IP)
WHERE ip.ip IN {ips}
RETURN COUNT(DISTINCT ip) AS count
"
data
query = "
MATCH (p:Ping {p:1, date:{date}})<-[:PINGED]-(ip:IP)
RETURN ip
"
ips = getNodes(graph, query, date=as.character(Sys.Date()-33))
ips = sapply(ips, '[[', 'ip')
data = data.frame(i=0, count=length(ips))
query = "
MATCH (p:Ping {p:1, date:{date}})<-[:PINGED]-(ip:IP)
WHERE ip.ip IN {ips}
RETURN COUNT(DISTINCT ip) AS count
"
for(i in 32:3) {
count = cypher(graph, query, ips=ips, date=as.character(Sys.Date()-i))
count = count[[1]]
data = rbind(data, data.frame(i=(33-i),count=count))
}
query = "
MATCH (p:Ping {p:1, date:{date}})<-[:PINGED]-(ip:IP)
RETURN ip
"
ips = getNodes(graph, query, date=as.character(Sys.Date()-33))
ips = sapply(ips, '[[', 'ip')
data = data.frame(i=0, count=length(ips))
query = "
MATCH (p:Ping {date:{date}})<-[:PINGED]-(ip:IP)
WHERE ip.ip IN {ips}
RETURN COUNT(DISTINCT ip) AS count
"
for(i in 32:3) {
count = cypher(graph, query, ips=ips, date=as.character(Sys.Date()-i))
count = count[[1]]
data = rbind(data, data.frame(i=(33-i),count=count))
}
ips = data
ips
query = "
MATCH (p:Ping {p:1, date:{date}})-[:FROM_MACHINE]->(m:Machine)
RETURN m
"
machines = getNodes(graph, query, date=as.character(Sys.Date()-33))
machines = sapply(machines, '[[', 'mac')
data = data.frame(i=0, count=length(machines))
data
machines[[1]]
query = "
MATCH (p:Ping {p:1, date:{date}})-[:FROM_MACHINE]->(m:Machine)
RETURN m
"
machines = getNodes(graph, query, date=as.character(Sys.Date()-33))
machines = sapply(machines, '[[', 'mac')
data = data.frame(i=0, count=length(machines))
query = "
MATCH (p:Ping {date:{date}})-[:FROM_MACHINE]->(m:Machine)
WHERE m.mac IN {machines}
RETURN COUNT(DISTINCT ip) AS count
"
for(i in 32:3) {
count = cypher(graph, query, machines=machines, date=as.character(Sys.Date()-i))
count = count[[1]]
data = rbind(data, data.frame(i=(33-i),count=count))
}
machines = data
query = "
MATCH (p:Ping {p:1, date:{date}})-[:FROM_MACHINE]->(m:Machine)
RETURN m
"
machines = getNodes(graph, query, date=as.character(Sys.Date()-33))
machines = sapply(machines, '[[', 'mac')
data = data.frame(i=0, count=length(machines))
query = "
MATCH (p:Ping {date:{date}})-[:FROM_MACHINE]->(m:Machine)
WHERE m.mac IN {machines}
RETURN COUNT(DISTINCT m) AS count
"
for(i in 32:3) {
count = cypher(graph, query, machines=machines, date=as.character(Sys.Date()-i))
count = count[[1]]
data = rbind(data, data.frame(i=(33-i),count=count))
}
machines = data
machines
632/2307
ips
860/4326
names(stores) = c("i", "stores")
names(stores) = c("i", "stores")
names(ips) = c("i", "ips")
names(machines) = c("i", "machines")
machines
data = merge(stores, ips)
data = merge(data, machines)
View(data)
library(ggplot2)
ggplot(data, aes(i)) +
stat_smooth(aes(y = stores, colour = "stores")) +
stat_smooth(aes(y = ips, colour = "ips")) +
stat_smooth(aes(y = machines, colour = "machines")) +
scale_colour_discrete(name = "")
ggplot(data, aes(i)) +
stat_smooth(aes(y = stores, colour = "stores"), se=FALSE) +
stat_smooth(aes(y = ips, colour = "ips"), se=FALSE) +
stat_smooth(aes(y = machines, colour = "machines"), se=FALSE) +
scale_colour_discrete(name = "")
ggplot(data, aes(i)) +
stat_smooth(aes(y = stores, colour = "stores"), se=FALSE) +
stat_smooth(aes(y = ips, colour = "ips"), se=FALSE) +
stat_smooth(aes(y = machines, colour = "machines"), se=FALSE) +
labs(x="Days Since", y="Count")
scale_colour_discrete(name = "")
ggplot(data, aes(i)) +
stat_smooth(aes(y = stores, colour = "stores"), se=FALSE) +
stat_smooth(aes(y = ips, colour = "ips"), se=FALSE) +
stat_smooth(aes(y = machines, colour = "machines"), se=FALSE) +
labs(x="Days Since", y="Count") +
scale_colour_discrete(name = "")
Sys.Date()-33
head(stores)
1170/4326
1 - 1170/4326
head(ips)
1 - 860/4326
head(machines)
1 - 632/2307
machines[1, ]
machines[30, ]
tail(machines)
520/2307
stores
782/4326
1-782/4326
as.Date('2014-12-13') + 30
Sys.Date()-3
query = "
MATCH (p:Ping {p:1, date:{date}})-[:FROM_STORE]->(s:Store)
RETURN s
"
stores = getNodes(graph, query, date=as.character(Sys.Date()-33))
stores = sapply(stores, '[[', 'id')
stores
?format
from_unix = as.numeric(as.POSIXct(Sys.Date()-33))
from_unix
to_unix - as.numerc(as.POSIXct(Sys.Date()-3))
to_unix = as.numerc(as.POSIXct(Sys.Date()-3))
to_unix = as.numeric(as.POSIXct(Sys.Date()-3))
to_unix
to_unix = as.numeric(as.POSIXct(Sys.Date()-2))
query = "
MATCH (p:Ping)-[:FROM_STORE]->(s:Store)
WHERE s.id IN {stores} AND p.unix >= {from_unix} AND p.unix <= {to_unix}
RETURN COUNT(DISTINCT s) AS count
"
from_unix = as.numeric(as.POSIXct(Sys.Date()-33))
to_unix = as.numeric(as.POSIXct(Sys.Date()-2))
count = cypher(graph, query, stores=stores, from_unix=from_unix, to_unix=to_unix)
count
length(stores)
query = "
MATCH (p:Ping)-[:FROM_STORE]->(s:Store)
WHERE s.id IN {stores} AND p.unix >= {from_unix} AND p.unix <= {to_unix}
RETURN s.id AS store, MAX(p.p) AS life
"
from_unix = as.numeric(as.POSIXct(Sys.Date()-33))
to_unix = as.numeric(as.POSIXct(Sys.Date()-2))
stuff = cypher(graph, query, stores=stores, from_unix=from_unix, to_unix=to_unix)
stuff
mean(stuff$life)
hist(stuff$life)
max(stuff$life)
d = density(stuff$life)
plot(d)
query = "
MATCH (p:Ping)-[:FROM_STORE]->(s:Store)
WHERE s.id IN {stores} AND p.unix >= {from_unix} AND p.unix <= {to_unix}
RETURN s.id AS store, MAX(p.p) AS life
"
from_unix = as.numeric(as.POSIXct(Sys.Date()-32))
to_unix = as.numeric(as.POSIXct(Sys.Date()-2))
stuff = cypher(graph, query, stores=stores, from_unix=from_unix, to_unix=to_unix)
mean(stuff$life)
stuff
length(stuff)
nrow(stuff)
max(stuff$life)
query = "
MATCH (p:Ping)-[:FROM_STORE]->(s:Store)
WHERE s.id IN {stores} AND p.unix >= {from_unix} AND p.unix <= {to_unix}
RETURN s.id AS store, COUNT(p) AS pings
"
from_unix = as.numeric(as.POSIXct(Sys.Date()-32))
to_unix = as.numeric(as.POSIXct(Sys.Date()-2))
stuff = cypher(graph, query, stores=stores, from_unix=from_unix, to_unix=to_unix)
mean(stuff$pings)
query = "
MATCH (p:Ping)-[:FROM_STORE]->(s:Store)
WHERE s.id IN {stores} AND p.unix >= {from_unix} AND p.unix <= {to_unix}
RETURN s.id AS store, MIN(p.unix) AS min_unix, MAX(p.unix) AS max_unix
"
from_unix = as.numeric(as.POSIXct(Sys.Date()-32))
to_unix = as.numeric(as.POSIXct(Sys.Date()-2))
stuff = cypher(graph, query, stores=stores, from_unix=from_unix, to_unix=to_unix)
stuff
stuff$min_date = as.Date(as.POSIXct(stuff$min_unix, origin="1970-01-01"))
stuff
query = "
MATCH (p:Ping)-[:FROM_STORE]->(s:Store)
WHERE s.id IN {stores} AND p.unix >= {from_unix} AND p.unix <= {to_unix}
RETURN s.id AS store, MAX(p.unix) AS max_unix
"
from_unix = as.numeric(as.POSIXct(Sys.Date()-32))
to_unix = as.numeric(as.POSIXct(Sys.Date()-2))
stuff = cypher(graph, query, stores=stores, from_unix=from_unix, to_unix=to_unix)
stuff$max_date = as.Date(as.POSIXct(stuff$max_unix, origin="1970-01-01"))
View(stuff)
stuff$min_date = as.Date(Sys.Date()-33)
View(stuff)
as.Date('2015-01-12') - as.Date('2014-12-13')
as.numeric(as.Date('2015-01-12') - as.Date('2014-12-13'))
stuff$life = as.numeric(stuff$max_date - stuff$min_date)
mean(stuff$life)
hist(stuff$life)
leads = read.csv("~/Downloads/Create_Exportable_List_All_Exportable_Leads (1).csv")
head(leads)
leads = read.csv("~/Downloads/Create_Exportable_List_All_Exportable_Leads (2).csv")
View(leads)
head(leads)
library(plyr)
?dplyr
?ddply
details = ddply(leads, .(Lead.Source.Detail), nrow)
View(details)
sources = ddply(leads, (.Lead.Source), nrow)
sources = ddply(leads, .(Lead.Source), nrow)
View(sources)
types = ddply(leads, .(Lead.Source.Type), nrow)
View(types)
sources = filter(sources, V1 = 1)
sources = filter(sources, V1 == 1)
?filter
library(plyr)
sources = filter(sources, V1 == 1)
sources
View(sources)
?filter
sources = plyr::filter(sources, V1==1)
library(plyr)
?plyr::filter
??plyr
library(dplyr)
sources = filter(sources, V1==1)
View(sources)
sources
sources = sources$Lead.Source
sources
sources = as.vector(sources)
sources
"Web" in sources
"Web" %in% sources
"to DM/KS" %in% sources
?ifelse
leads$bad = ifelse(lead$Lead.Source %in% sources, TRUE, FALSE)
leads$bad = ifelse(leads$Lead.Source %in% sources, TRUE, FALSE)
head(leads)
bad = filter(leads, bad==TRUE)
View(bad)
names(bad)
bad = select(bad, Id, Email.Address, Lead.Source)
bad
View(bad)
write.csv(bad, 'bad_sources_hank.csv')
getwd()
?File
?file
?file.move
?file.rename
install.packages("GGally")
library(RNeo4j)
graph = startGraph("http://localhost:7474/db/data/")
graph
clear(graph)
importSample(graph, "tweets")
summary(graph)
?graph.data.frame
??graph.data.frame
library(GGally)
?graph.data.frame
??graph.data.frame
library(network)
install.packages("network")
library(network)
?network
summary(graph)
remove.packages("RNeo4j")
devtools::install_github("nicolewhite/RNeo4j")
library(RNeo4j)
neo4j = startGraph("http://localhost:7474/db/data/", auth_token="3378f3296094b4e1f7c33dc4287ad757")
neo4j
summary(neo4j)
importSample(neo4j, "movies")
summary(neo4j)
?list.files
?file.copy
getwd()
setwd("~/Documents/r-knitr-jekyll/_drafts")
setwd("~/Documents/GitHub/r-knitr-jekyll/_drafts")
pics = list.files("{{ site.url }}/images", ".png")
pics
file.copy(pics, "../images")
getwd()
?file.copy
pics
file.copy(from = pics, to = "../images")
pics = sapply(paste0("{{ site.url }}/images", pics))
pics = sapply(pics, paste0("{{ site.url }}/images"))
pics = sapply(pics, paste0("{{ site.url }}/images", pics))
pics = sapply(pics, function(x) paste0("{{ site.url }}/images", x))
pics
fromdir = "{{ site.url }}/images"
todir = "../images"
pics = list.files(fromdir, ".png")
pics
pics = sapply(pics, function(x) paste0(fromdir, x))
pics
pics = sapply(pics, function(x) paste(fromdir, x, sep="/"))
pics
file.copy(pics, "../images")
pics[1]
unlist(pics)
names(pics) = NULL
pics
file.copy(pics, "../images")
pics
pics = list.files(fromdir, ".png")
pics = sapply(pics, function(x) paste(fromdir, x, sep="/"))
pics
file.copy(pics, "../images")
?startGraph
library(RNeo4j)
remove.packages("RNeo4j")
devtools::install_github("nicolewhite/RNeo4j")
library(RNeo4j)
?startGraph
remove.packages("RNeo4j")
